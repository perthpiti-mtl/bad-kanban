import { render, fireEvent } from '@testing-library/svelte'
import { expect, test, describe } from 'vitest'
import TaskCard from '$lib/components/kanban/TaskCard.svelte'
import type { Task } from '$lib/types'

// Mock task data for testing
const mockTask: Task = {
  id: 'test-1',
  title: 'Test Task Title',
  description: 'This is a test task description that should be displayed properly',
  status: 'todo',
  priority: 'high',
  dueDate: new Date('2025-08-20'),
  createdAt: new Date('2025-08-10'),
  updatedAt: new Date('2025-08-10'),
  aiGenerated: false,
  originalPrompt: null
}

const mockAiTask: Task = {
  id: 'test-2',
  title: 'AI Generated Task',
  description: 'This task was generated by AI and should show the AI badge',
  status: 'in-progress',
  priority: 'medium',
  dueDate: null,
  createdAt: new Date('2025-08-09'),
  updatedAt: new Date('2025-08-09'),
  aiGenerated: true,
  originalPrompt: 'Generate a sample task'
}

const mockLongDescriptionTask: Task = {
  id: 'test-3',
  title: 'Task with Long Description',
  description: 'This is a very long task description that should be truncated when displayed in the card component. It contains significantly more than 100 characters to test the truncation functionality and tooltip display behavior, ensuring proper text overflow handling and user experience optimization.',
  status: 'done',
  priority: 'low',
  dueDate: null,
  createdAt: new Date('2025-08-08'),
  updatedAt: new Date('2025-08-08'),
  aiGenerated: false,
  originalPrompt: null
}

describe('TaskCard', () => {
  test('renders task information correctly', () => {
    const { getByText } = render(TaskCard, { task: mockTask })
    
    expect(getByText('Test Task Title')).toBeInTheDocument()
    expect(getByText(/This is a test task description/)).toBeInTheDocument()
    expect(getByText('high')).toBeInTheDocument()
    expect(getByText('Due: 8/20/2025')).toBeInTheDocument()
  })

  test('displays priority badge with correct styling', () => {
    const { container } = render(TaskCard, { task: mockTask })
    
    const priorityBadge = container.querySelector('.badge-error')
    expect(priorityBadge).toBeInTheDocument()
    expect(priorityBadge).toHaveTextContent('high')
  })

  test('shows different priority colors', () => {
    // Test high priority
    const { container: highContainer } = render(TaskCard, { 
      task: { ...mockTask, priority: 'high' } 
    })
    expect(highContainer.querySelector('.badge-error')).toBeInTheDocument()

    // Test medium priority
    const { container: mediumContainer } = render(TaskCard, { 
      task: { ...mockTask, priority: 'medium' } 
    })
    expect(mediumContainer.querySelector('.badge-warning')).toBeInTheDocument()

    // Test low priority
    const { container: lowContainer } = render(TaskCard, { 
      task: { ...mockTask, priority: 'low' } 
    })
    expect(lowContainer.querySelector('.badge-info')).toBeInTheDocument()
  })

  test('displays AI generated badge when task is AI generated', () => {
    const { getByText } = render(TaskCard, { task: mockAiTask })
    
    expect(getByText('AI Generated')).toBeInTheDocument()
  })

  test('does not display AI generated badge for regular tasks', () => {
    const { queryByText } = render(TaskCard, { task: mockTask })
    
    expect(queryByText('AI Generated')).not.toBeInTheDocument()
  })

  test('truncates long descriptions', () => {
    const { container } = render(TaskCard, { task: mockLongDescriptionTask })
    
    const description = container.querySelector('[id^="task-"][id$="-desc"]')
    expect(description?.textContent).toContain('...')
    expect(description?.textContent?.length).toBeLessThan(mockLongDescriptionTask.description.length)
  })

  test('shows full description in tooltip for truncated text', () => {
    const { container } = render(TaskCard, { task: mockLongDescriptionTask })
    
    const tooltipElement = container.querySelector('.tooltip')
    expect(tooltipElement).toBeInTheDocument()
    expect(tooltipElement).toHaveAttribute('data-tip', mockLongDescriptionTask.description)
  })

  test('does not show tooltip for short descriptions', () => {
    const { container } = render(TaskCard, { task: mockTask })
    
    const tooltipElement = container.querySelector('.tooltip')
    expect(tooltipElement).not.toBeInTheDocument()
  })

  test('emits click event with task data', async () => {
    let clickEvent: CustomEvent | null = null
    const { container } = render(TaskCard, { 
      task: mockTask,
      $$events: {
        click: (e: CustomEvent) => {
          clickEvent = e
        }
      }
    })
    
    const card = container.querySelector('[role="button"]')
    expect(card).toBeInTheDocument()
    
    await fireEvent.click(card!)
    
    expect(clickEvent).toBeTruthy()
    expect(clickEvent.detail).toEqual({ task: mockTask })
  })

  test('handles keyboard navigation', async () => {
    const clickEvents: CustomEvent[] = []
    const { container } = render(TaskCard, { 
      task: mockTask,
      $$events: {
        click: (e: CustomEvent) => {
          clickEvents.push(e)
        }
      }
    })
    
    const card = container.querySelector('[role="button"]')
    expect(card).toBeInTheDocument()
    
    // Test Enter key
    await fireEvent.keyDown(card!, { key: 'Enter' })
    expect(clickEvents).toHaveLength(1)
    expect(clickEvents[0].detail).toEqual({ task: mockTask })
    
    // Test Space key
    await fireEvent.keyDown(card!, { key: ' ' })
    expect(clickEvents).toHaveLength(2)
    expect(clickEvents[1].detail).toEqual({ task: mockTask })
  })

  test('has proper accessibility attributes', () => {
    const { container } = render(TaskCard, { task: mockTask })
    
    const card = container.querySelector('[role="button"]')
    expect(card).toBeInTheDocument()
    expect(card).toHaveAttribute('tabindex', '0')
    expect(card).toHaveAttribute('aria-labelledby', 'task-test-1-title')
    expect(card).toHaveAttribute('aria-describedby', 'task-test-1-desc task-test-1-priority')
    
    const title = container.querySelector('#task-test-1-title')
    const description = container.querySelector('#task-test-1-desc')
    const priority = container.querySelector('#task-test-1-priority')
    
    expect(title).toBeInTheDocument()
    expect(description).toBeInTheDocument()
    expect(priority).toBeInTheDocument()
    expect(priority).toHaveAttribute('aria-label', 'High Priority')
  })

  test('renders compact variant correctly', () => {
    const { container } = render(TaskCard, { task: mockTask, variant: 'compact' })
    
    const card = container.querySelector('.card-compact')
    expect(card).toBeInTheDocument()
    
    const cardBody = container.querySelector('.card-body')
    expect(cardBody).toHaveClass('p-3')
  })

  test('renders default variant correctly', () => {
    const { container } = render(TaskCard, { task: mockTask, variant: 'default' })
    
    const card = container.querySelector('.card')
    expect(card).toBeInTheDocument()
    expect(card).not.toHaveClass('card-compact')
    
    const cardBody = container.querySelector('.card-body')
    expect(cardBody).toHaveClass('p-4')
  })

  test('does not display due date when not provided', () => {
    const taskWithoutDueDate = { ...mockTask, dueDate: null }
    const { queryByText } = render(TaskCard, { task: taskWithoutDueDate })
    
    expect(queryByText(/Due:/)).not.toBeInTheDocument()
  })

  test('displays due date when provided', () => {
    const { getByText } = render(TaskCard, { task: mockTask })
    
    expect(getByText('Due: 8/20/2025')).toBeInTheDocument()
  })
})